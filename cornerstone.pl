# Usage: cornerstone.pl folder locations
# Output: a 'proteins' folder of files with protein sequences 
###  folder: work folder
###     place where cornerstone will place the 'proteins' folder
### locations: list of sequence locations generated by Genbank's
###     search "To Text" function

use strict;
use warnings;
package Cornerstone;

# find_bounds(filename, block for bounds, block for names)
### This is a generator. It yields beginning and ending
### indices first, then the protein names.
sub find_bounds {
	my ($file, $push_bounds, $push_name) = @_;
	open(my $handle, $file) or
      die "Cornerstone::find_bounds cannot open file \"$file\" for reading\n";
	while(<$handle>) {
		if ($_ =~ /(\d*)\.\.(\d*)/) {
			my ($start, $end) = ($1, $2);         
         # Quirk: Genbank sometimes reverses the indices
			($start, $end) = ($end, $start) if ($start > $end);
         # Leader sequence of 12 before `tac/uag` starts
			&$push_bounds($start, $end + 12);
		} elsif ($_ =~ /^\d*?: (.*)$/) {
			my $hair = $1; # Vivek's hairy
			$hair =~ s/\s//g;
			&$push_name($hair);
		}
	}
}

# Page 43-6 of _Programming Perl for Bioinformatics_ by James D. Tisdall
sub reverse_complement {
	for(shift) { tr/atcg/uagc/; return scalar reverse; }
}

our $o;
sub extract {
	my ($start, $end) = @_;
	return substr($o, $start, $end - $start + 1);
}

sub main {
   require 'getseq.pl';
   my ($dir, $locations) = @ARGV;
   chdir($dir);
   
   # Slurp the E. Coli genome as a huge text file
   # for quick access.
   $o = getseq('ecoli-k12.txt');
   
   my (@sequences, @names);   
   find_bounds $locations,
      sub { push @sequences, &extract; },
      sub { push @names, shift; };
   
   # Output
   mkdir('proteins'); chdir('proteins');
   map {
      my $name = shift @names; {
         open(my $handle, ">$name.txt") or
            die("cornerstone cannot open $name for writing");
         print $handle reverse_complement $_;
      }
   } @sequences;
   
   print 'Done', $/;
}

__PACKAGE__->main() unless caller;